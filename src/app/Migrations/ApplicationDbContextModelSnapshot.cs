// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app.Database;

#nullable disable

namespace app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrupoPermissaoPermissao", b =>
                {
                    b.Property<Guid>("GruposPermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GruposPermissoesId", "PermissoesId");

                    b.HasIndex("PermissoesId");

                    b.ToTable("PermissoesGruposPermissoes", (string)null);
                });

            modelBuilder.Entity("GrupoPermissaoUsuario", b =>
                {
                    b.Property<Guid>("GruposPermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuariosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GruposPermissoesId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("UsuariosGruposPermissoes", (string)null);
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45432663-7878-4c61-98e9-7bbf69fef4a5"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5520),
                            EstadoId = new Guid("c25c7d74-0f11-48e6-93b2-6900ced2e3a7"),
                            Name = "Campinas"
                        },
                        new
                        {
                            Id = new Guid("d23704a4-23d7-4629-80a2-13a888cc70dc"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5520),
                            EstadoId = new Guid("dee95539-01d3-444f-a8bc-d912acf77701"),
                            Name = "Niterói"
                        },
                        new
                        {
                            Id = new Guid("9f68ee08-82b4-4b93-b879-99c7f52feac7"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5520),
                            EstadoId = new Guid("2bb267b2-467a-428b-96c1-850b320b1dec"),
                            Name = "Uberlândia"
                        },
                        new
                        {
                            Id = new Guid("44aacd98-8fb5-4416-a32f-aec0535e32c7"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5520),
                            EstadoId = new Guid("3b1b353e-22f6-4b2c-acef-c2b49b2e5e4d"),
                            Name = "Salvador"
                        },
                        new
                        {
                            Id = new Guid("7f3da876-cc3b-48ab-9338-83c2324c57d5"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5530),
                            EstadoId = new Guid("b89a67d6-9b23-40ef-a53e-4298beaa4172"),
                            Name = "Curitiba"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5ef2702-b680-45e3-9474-7ff0150287c1"),
                            CpfCnpj = "12345678901",
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5570),
                            Nome = "João Silva"
                        },
                        new
                        {
                            Id = new Guid("5e5b05de-4f2f-4c92-acaf-3bd044194c09"),
                            CpfCnpj = "23456789012",
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5570),
                            Nome = "Maria Oliveira"
                        },
                        new
                        {
                            Id = new Guid("a915718e-05bf-4c16-93b2-290c470b26cb"),
                            CpfCnpj = "34567890123",
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5580),
                            Nome = "Carlos Souza"
                        },
                        new
                        {
                            Id = new Guid("2f31225a-874c-4386-9d9c-2b4f0dc792e4"),
                            CpfCnpj = "45678901234",
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5580),
                            Nome = "Ana Santos"
                        },
                        new
                        {
                            Id = new Guid("004a84c4-a3c5-497b-8050-bb8d797e78b3"),
                            CpfCnpj = "56789012345",
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5580),
                            Nome = "Pedro Costa"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Estado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c25c7d74-0f11-48e6-93b2-6900ced2e3a7"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5430),
                            Name = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            Id = new Guid("dee95539-01d3-444f-a8bc-d912acf77701"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5440),
                            Name = "Rio de Janeiro",
                            Sigla = "RJ"
                        },
                        new
                        {
                            Id = new Guid("2bb267b2-467a-428b-96c1-850b320b1dec"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5440),
                            Name = "Minas Gerais",
                            Sigla = "MG"
                        },
                        new
                        {
                            Id = new Guid("3b1b353e-22f6-4b2c-acef-c2b49b2e5e4d"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5450),
                            Name = "Bahia",
                            Sigla = "BA"
                        },
                        new
                        {
                            Id = new Guid("b89a67d6-9b23-40ef-a53e-4298beaa4172"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5450),
                            Name = "Paraná",
                            Sigla = "PR"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.FonteDeEnergia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EficienciaMedia")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FontesDeEnergia");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a6da5e6-92c6-4b76-b4de-796e7adb89c9"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5610),
                            Tipo = "Solar"
                        },
                        new
                        {
                            Id = new Guid("b7e858f0-cb5c-47d5-903a-18de5d8d7533"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5620),
                            Tipo = "Eólica"
                        },
                        new
                        {
                            Id = new Guid("9a7569a7-2d89-4676-bf98-e0a60731170e"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5620),
                            Tipo = "Biomassa"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.GrupoPermissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GruposPermissoes");
                });

            modelBuilder.Entity("app.Models.Entities.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c554482-ba28-40a7-995c-fb386724465c"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5680),
                            Nome = "Usinas"
                        },
                        new
                        {
                            Id = new Guid("01af61a1-1d90-4f2c-aac7-411d7afafa11"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5680),
                            Nome = "Clientes"
                        },
                        new
                        {
                            Id = new Guid("e3542ece-5682-43b7-a482-976c93ee4aab"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5680),
                            Nome = "Cidades"
                        },
                        new
                        {
                            Id = new Guid("7bd6c62d-0ebd-4ae4-b5af-25ddd17099e3"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5690),
                            Nome = "Estados"
                        },
                        new
                        {
                            Id = new Guid("e50676d8-e31f-44b3-8617-2a109b98344a"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5690),
                            Nome = "FontesDeEnergia"
                        },
                        new
                        {
                            Id = new Guid("6f725aaf-cb57-4714-842c-aad9c1fad2af"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5690),
                            Nome = "ProducaoDeEnergia"
                        },
                        new
                        {
                            Id = new Guid("6a78caf9-d0f4-49b2-9c23-ac99ef9b43d2"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5700),
                            Nome = "Usuarios"
                        },
                        new
                        {
                            Id = new Guid("42292c6a-fdc0-4ace-a5f7-879c47c7907f"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5700),
                            Nome = "GruposPermissoes"
                        },
                        new
                        {
                            Id = new Guid("d218c393-7e42-4e30-9587-8b9ab465ec3a"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5700),
                            Nome = "Permissoes"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.ProducaoDeEnergia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataProducao")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EficienciaOperacional")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("EnergiaGeradaKW")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsinaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsinaId");

                    b.ToTable("ProducoesDeEnergia");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CapacidadeKW")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("FonteDeEnergiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusOperacional")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FonteDeEnergiaId");

                    b.ToTable("Usinas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad9c8864-8068-4cae-977f-aa5a1ff6aab5"),
                            CapacidadeKW = 1000.0m,
                            CidadeId = new Guid("45432663-7878-4c61-98e9-7bbf69fef4a5"),
                            ClienteId = new Guid("f5ef2702-b680-45e3-9474-7ff0150287c1"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5830),
                            DataInicio = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua A, 123",
                            FonteDeEnergiaId = new Guid("5a6da5e6-92c6-4b76-b4de-796e7adb89c9"),
                            Nome = "Usina Solar SP",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("191d64b4-b1e5-4620-85bc-21664572cbd6"),
                            CapacidadeKW = 1500.0m,
                            CidadeId = new Guid("d23704a4-23d7-4629-80a2-13a888cc70dc"),
                            ClienteId = new Guid("5e5b05de-4f2f-4c92-acaf-3bd044194c09"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5840),
                            DataInicio = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua B, 456",
                            FonteDeEnergiaId = new Guid("b7e858f0-cb5c-47d5-903a-18de5d8d7533"),
                            Nome = "Usina Eólica RJ",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("250422c9-b82a-4f4c-9192-fc2200d6c982"),
                            CapacidadeKW = 800.0m,
                            CidadeId = new Guid("9f68ee08-82b4-4b93-b879-99c7f52feac7"),
                            ClienteId = new Guid("a915718e-05bf-4c16-93b2-290c470b26cb"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5850),
                            DataInicio = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua C, 789",
                            FonteDeEnergiaId = new Guid("9a7569a7-2d89-4676-bf98-e0a60731170e"),
                            Nome = "Usina Biomassa MG",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("a047bb01-c13b-457d-8c75-e156b67e73a6"),
                            CapacidadeKW = 1200.0m,
                            CidadeId = new Guid("44aacd98-8fb5-4416-a32f-aec0535e32c7"),
                            ClienteId = new Guid("2f31225a-874c-4386-9d9c-2b4f0dc792e4"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5850),
                            DataInicio = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua D, 321",
                            FonteDeEnergiaId = new Guid("5a6da5e6-92c6-4b76-b4de-796e7adb89c9"),
                            Nome = "Usina Solar BA",
                            StatusOperacional = "Em Manutenção"
                        },
                        new
                        {
                            Id = new Guid("0e0fd4ac-ee1d-4e67-bed5-4c12af18a5c5"),
                            CapacidadeKW = 2000.0m,
                            CidadeId = new Guid("7f3da876-cc3b-48ab-9338-83c2324c57d5"),
                            ClienteId = new Guid("004a84c4-a3c5-497b-8050-bb8d797e78b3"),
                            CreatedAt = new DateTime(2024, 12, 10, 21, 29, 8, 638, DateTimeKind.Local).AddTicks(5860),
                            DataInicio = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua E, 654",
                            FonteDeEnergiaId = new Guid("b7e858f0-cb5c-47d5-903a-18de5d8d7533"),
                            Nome = "Usina Eólica PR",
                            StatusOperacional = "Operando"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("GrupoPermissaoPermissao", b =>
                {
                    b.HasOne("app.Models.Entities.GrupoPermissao", null)
                        .WithMany()
                        .HasForeignKey("GruposPermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Permissao", null)
                        .WithMany()
                        .HasForeignKey("PermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrupoPermissaoUsuario", b =>
                {
                    b.HasOne("app.Models.Entities.GrupoPermissao", null)
                        .WithMany()
                        .HasForeignKey("GruposPermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.HasOne("app.Models.Entities.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("app.Models.Entities.ProducaoDeEnergia", b =>
                {
                    b.HasOne("app.Models.Entities.Usina", "Usina")
                        .WithMany("ProducoesDeEnergia")
                        .HasForeignKey("UsinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usina");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.HasOne("app.Models.Entities.Cidade", "Cidade")
                        .WithMany("Usinas")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Cliente", "Cliente")
                        .WithMany("Usinas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.FonteDeEnergia", "FonteDeEnergia")
                        .WithMany()
                        .HasForeignKey("FonteDeEnergiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");

                    b.Navigation("Cliente");

                    b.Navigation("FonteDeEnergia");
                });

            modelBuilder.Entity("app.Models.Entities.Usuario", b =>
                {
                    b.HasOne("app.Models.Entities.Cliente", "Cliente")
                        .WithMany("Usuarios")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.Navigation("Usinas");
                });

            modelBuilder.Entity("app.Models.Entities.Cliente", b =>
                {
                    b.Navigation("Usinas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("app.Models.Entities.Estado", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.Navigation("ProducoesDeEnergia");
                });
#pragma warning restore 612, 618
        }
    }
}
