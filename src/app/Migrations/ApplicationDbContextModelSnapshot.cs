// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app.Database;

#nullable disable

namespace app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrupoPermissaoPermissao", b =>
                {
                    b.Property<Guid>("GruposPermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GruposPermissoesId", "PermissoesId");

                    b.HasIndex("PermissoesId");

                    b.ToTable("PermissoesGruposPermissoes", (string)null);
                });

            modelBuilder.Entity("GrupoPermissaoUsuario", b =>
                {
                    b.Property<Guid>("GruposPermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuariosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GruposPermissoesId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("UsuariosGruposPermissoes", (string)null);
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c83cad5-f218-4152-9183-818b88e58c15"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8100),
                            EstadoId = new Guid("69ae2f75-15bd-4445-a7e1-4a17fa897e6e"),
                            Name = "Campinas"
                        },
                        new
                        {
                            Id = new Guid("b36ce965-c438-453c-979b-0954e1ea919c"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8110),
                            EstadoId = new Guid("894b9b52-df1b-4267-9936-856ac796900a"),
                            Name = "Niterói"
                        },
                        new
                        {
                            Id = new Guid("c5b2285a-d0ec-4341-ba3c-26a15905dd1d"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8110),
                            EstadoId = new Guid("20270a5c-9e8f-4295-83b1-c7b6af694730"),
                            Name = "Uberlândia"
                        },
                        new
                        {
                            Id = new Guid("8e2ea5ed-33a9-452b-a7cb-41e6f93bbd67"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8110),
                            EstadoId = new Guid("2433ef2a-18e3-47cc-87c6-20fd56a1bf6d"),
                            Name = "Salvador"
                        },
                        new
                        {
                            Id = new Guid("9bd6faef-bb8c-4f65-a78d-f45945e9dc68"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8120),
                            EstadoId = new Guid("a062b3cd-073b-45c4-a099-d239d1f43970"),
                            Name = "Curitiba"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6b29f14-b441-4baa-ba85-046537aba62a"),
                            CpfCnpj = "12345678901",
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8150),
                            Nome = "João Silva"
                        },
                        new
                        {
                            Id = new Guid("73c6859b-2c47-47ae-9741-af392bf3c12f"),
                            CpfCnpj = "23456789012",
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8160),
                            Nome = "Maria Oliveira"
                        },
                        new
                        {
                            Id = new Guid("1b095682-da21-42fd-952a-a7066d7e5e99"),
                            CpfCnpj = "34567890123",
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8160),
                            Nome = "Carlos Souza"
                        },
                        new
                        {
                            Id = new Guid("cfd49eea-b176-4bd5-b355-8cd078f487b4"),
                            CpfCnpj = "45678901234",
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8160),
                            Nome = "Ana Santos"
                        },
                        new
                        {
                            Id = new Guid("d233add9-9392-440e-879d-9647b9eb3bb0"),
                            CpfCnpj = "56789012345",
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8160),
                            Nome = "Pedro Costa"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Estado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69ae2f75-15bd-4445-a7e1-4a17fa897e6e"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(7960),
                            Name = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            Id = new Guid("894b9b52-df1b-4267-9936-856ac796900a"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(7960),
                            Name = "Rio de Janeiro",
                            Sigla = "RJ"
                        },
                        new
                        {
                            Id = new Guid("20270a5c-9e8f-4295-83b1-c7b6af694730"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(7970),
                            Name = "Minas Gerais",
                            Sigla = "MG"
                        },
                        new
                        {
                            Id = new Guid("2433ef2a-18e3-47cc-87c6-20fd56a1bf6d"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(7970),
                            Name = "Bahia",
                            Sigla = "BA"
                        },
                        new
                        {
                            Id = new Guid("a062b3cd-073b-45c4-a099-d239d1f43970"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(7970),
                            Name = "Paraná",
                            Sigla = "PR"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.FonteDeEnergia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EficienciaMedia")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FontesDeEnergia");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3acbae09-02bb-4c2b-a8f6-9b4c6e3fe870"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8190),
                            Tipo = "Solar"
                        },
                        new
                        {
                            Id = new Guid("a2d1242e-bc88-48b7-af05-d3fc4338fa07"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8190),
                            Tipo = "Eólica"
                        },
                        new
                        {
                            Id = new Guid("47f91337-0bbb-401d-a3a3-2c8683f3c36f"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8200),
                            Tipo = "Biomassa"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.GrupoPermissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GruposPermissoes");
                });

            modelBuilder.Entity("app.Models.Entities.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c0bbe58-4ee5-4bd2-ae26-60e8691e049f"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8240),
                            Nome = "Usinas"
                        },
                        new
                        {
                            Id = new Guid("9599c4b7-7af8-4318-935d-9b3a74494074"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8240),
                            Nome = "Clientes"
                        },
                        new
                        {
                            Id = new Guid("c3856650-0e3b-4817-96b2-256f37a10a51"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8240),
                            Nome = "Cidades"
                        },
                        new
                        {
                            Id = new Guid("554c063a-9691-4b76-9f0a-001c81f6409b"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8250),
                            Nome = "Estados"
                        },
                        new
                        {
                            Id = new Guid("cdc2ad71-bb66-4fa8-a34b-f712b17789b7"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8250),
                            Nome = "FontesDeEnergia"
                        },
                        new
                        {
                            Id = new Guid("59df1111-fb94-4e78-9e28-b4760e4004c3"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8250),
                            Nome = "ProducaoDeEnergia"
                        },
                        new
                        {
                            Id = new Guid("d3de2b8f-6785-40e5-93fa-4c39083c8218"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8250),
                            Nome = "Usuarios"
                        },
                        new
                        {
                            Id = new Guid("6be6e968-6273-495b-9e26-f0a01c7f848d"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8260),
                            Nome = "GruposPermissoes"
                        },
                        new
                        {
                            Id = new Guid("7225a23c-bc0a-4024-9e4c-0a058b60ad94"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8260),
                            Nome = "Permissoes"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.ProducaoDeEnergia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataProducao")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EficienciaOperacional")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("EnergiaGeradaKW")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsinaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsinaId");

                    b.ToTable("ProducoesDeEnergia");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CapacidadeKW")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("FonteDeEnergiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusOperacional")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FonteDeEnergiaId");

                    b.ToTable("Usinas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd3a2a1a-7e7a-4982-8a8a-f97679922b7a"),
                            CapacidadeKW = 1000.0m,
                            CidadeId = new Guid("1c83cad5-f218-4152-9183-818b88e58c15"),
                            ClienteId = new Guid("c6b29f14-b441-4baa-ba85-046537aba62a"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8360),
                            DataInicio = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua A, 123",
                            FonteDeEnergiaId = new Guid("3acbae09-02bb-4c2b-a8f6-9b4c6e3fe870"),
                            Nome = "Usina Solar SP",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("b41dcc91-90da-43ba-af0b-376dc1849a73"),
                            CapacidadeKW = 1500.0m,
                            CidadeId = new Guid("b36ce965-c438-453c-979b-0954e1ea919c"),
                            ClienteId = new Guid("73c6859b-2c47-47ae-9741-af392bf3c12f"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8370),
                            DataInicio = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua B, 456",
                            FonteDeEnergiaId = new Guid("a2d1242e-bc88-48b7-af05-d3fc4338fa07"),
                            Nome = "Usina Eólica RJ",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("a8d92b3e-48e5-485b-9ab5-922c321e51ad"),
                            CapacidadeKW = 800.0m,
                            CidadeId = new Guid("c5b2285a-d0ec-4341-ba3c-26a15905dd1d"),
                            ClienteId = new Guid("1b095682-da21-42fd-952a-a7066d7e5e99"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8380),
                            DataInicio = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua C, 789",
                            FonteDeEnergiaId = new Guid("47f91337-0bbb-401d-a3a3-2c8683f3c36f"),
                            Nome = "Usina Biomassa MG",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("c585ebcc-bac4-46a8-9569-e7786a32eb85"),
                            CapacidadeKW = 1200.0m,
                            CidadeId = new Guid("8e2ea5ed-33a9-452b-a7cb-41e6f93bbd67"),
                            ClienteId = new Guid("cfd49eea-b176-4bd5-b355-8cd078f487b4"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8380),
                            DataInicio = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua D, 321",
                            FonteDeEnergiaId = new Guid("3acbae09-02bb-4c2b-a8f6-9b4c6e3fe870"),
                            Nome = "Usina Solar BA",
                            StatusOperacional = "Em Manutenção"
                        },
                        new
                        {
                            Id = new Guid("144b4a61-bd6a-4d34-8bbb-1da375aa0a63"),
                            CapacidadeKW = 2000.0m,
                            CidadeId = new Guid("9bd6faef-bb8c-4f65-a78d-f45945e9dc68"),
                            ClienteId = new Guid("d233add9-9392-440e-879d-9647b9eb3bb0"),
                            CreatedAt = new DateTime(2024, 12, 11, 1, 38, 53, 972, DateTimeKind.Local).AddTicks(8390),
                            DataInicio = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua E, 654",
                            FonteDeEnergiaId = new Guid("a2d1242e-bc88-48b7-af05-d3fc4338fa07"),
                            Nome = "Usina Eólica PR",
                            StatusOperacional = "Operando"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("GrupoPermissaoPermissao", b =>
                {
                    b.HasOne("app.Models.Entities.GrupoPermissao", null)
                        .WithMany()
                        .HasForeignKey("GruposPermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Permissao", null)
                        .WithMany()
                        .HasForeignKey("PermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrupoPermissaoUsuario", b =>
                {
                    b.HasOne("app.Models.Entities.GrupoPermissao", null)
                        .WithMany()
                        .HasForeignKey("GruposPermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.HasOne("app.Models.Entities.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("app.Models.Entities.ProducaoDeEnergia", b =>
                {
                    b.HasOne("app.Models.Entities.Usina", "Usina")
                        .WithMany("ProducoesDeEnergia")
                        .HasForeignKey("UsinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usina");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.HasOne("app.Models.Entities.Cidade", "Cidade")
                        .WithMany("Usinas")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Cliente", "Cliente")
                        .WithMany("Usinas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.FonteDeEnergia", "FonteDeEnergia")
                        .WithMany()
                        .HasForeignKey("FonteDeEnergiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");

                    b.Navigation("Cliente");

                    b.Navigation("FonteDeEnergia");
                });

            modelBuilder.Entity("app.Models.Entities.Usuario", b =>
                {
                    b.HasOne("app.Models.Entities.Cliente", "Cliente")
                        .WithMany("Usuarios")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.Navigation("Usinas");
                });

            modelBuilder.Entity("app.Models.Entities.Cliente", b =>
                {
                    b.Navigation("Usinas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("app.Models.Entities.Estado", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.Navigation("ProducoesDeEnergia");
                });
#pragma warning restore 612, 618
        }
    }
}
